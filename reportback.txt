from flask import Flask, jsonify, request
import sqlite3

app = Flask(_name_)

# SQLite database file
DATABASE = 'complaints.db'


def get_db():
    conn = sqlite3.connect(DATABASE)
    conn.row_factory = sqlite3.Row  # This will allow us to access columns by name
    return conn


@app.route('/get_complaints', methods=['GET'])
def get_complaints():
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM complaints")  # Fetch all complaints
    complaints = cursor.fetchall()
    conn.close()

    # Convert the rows into a list of dictionaries
    complaints_list = []
    for complaint in complaints:
        complaints_list.append({
            'staff_id': complaint['staff_id'],
            'reported_date': complaint['reported_date'],
            'system_operation_level': complaint['system_operation_level'],
            'complete_action_date': complaint['complete_action_date'],
            'closing_by_date': complaint['closing_by_date'],
            'closed_date': complaint['closed_date'],
            'status': complaint['status']
        })
    return jsonify(complaints_list)


@app.route('/add_complaint', methods=['POST'])
def add_complaint():
    # Sample data, in a real app this would come from the request body
    complaint = {
        'staff_id': '12345',
        'reported_date': '2025-03-14',
        'system_operation_level': 'Level 1',
        'complete_action_date': '2025-03-16',
        'closing_by_date': '2025-03-17',
        'closed_date': '2025-03-18',
        'status': 'uncleared'  # or 'cleared'
    }

    conn = get_db()
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO complaints (staff_id, reported_date, system_operation_level, complete_action_date, closing_by_date, closed_date, status)
        VALUES (?, ?, ?, ?, ?, ?, ?)
    """, (complaint['staff_id'], complaint['reported_date'], complaint['system_operation_level'],
          complaint['complete_action_date'], complaint['closing_by_date'], complaint['closed_date'], complaint['status']))

    conn.commit()
    conn.close()

    return jsonify({"message": "Complaint added successfully!"}), 201


if _name_ == '_main_':
    # Initialize the database and create the table if it doesn't exist
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS complaints (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            staff_id TEXT,
            reported_date TEXT,
            system_operation_level TEXT,
            complete_action_date TEXT,
            closing_by_date TEXT,
            closed_date TEXT,
            status TEXT
        )
    """)
    conn.commit()
    conn.close()

    app.run(debug=True)